(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{452:function(e,t,n){"use strict";n.r(t);var s=n(56),i=Object(s.a)({},(function(){var e=this.$createElement,t=this._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[t("h1",{attrs:{id:"otool命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#otool命令"}},[this._v("#")]),this._v(" otool命令")]),this._v(" "),t("p",[this._v("-f print the fat headers\n-a print the archive header\n-h print the mach header\n-l print the load commands\n-L print shared libraries used\n-D print shared library id name\n-t print the text section (disassemble with -v)\n-x print all text sections (disassemble with -v)\n-p "),t("routine",{attrs:{name:""}},[this._v("  start dissassemble from routine name\n-s "),t("segname",[t("sectname",[this._v(" print contents of section\n-d print the data section\n-o print the Objective-C segment\n-r print the relocation entries\n-S print the table of contents of a library (obsolete)\n-T print the table of contents of a dynamic shared library (obsolete)\n-M print the module table of a dynamic shared library (obsolete)\n-R print the reference table of a dynamic shared library (obsolete)\n-I print the indirect symbol table\n-H print the two-level hints table (obsolete)\n-G print the data in code table\n-v print verbosely (symbolically) when possible\n-V print disassembled operands symbolically\n-c print argument strings of a core file\n-X print no leading addresses or headers\n-m don't use archive(member) syntax\n-B force Thumb disassembly (ARM objects only)\n-q use llvm's disassembler (the default)\n-Q use otool(1)'s disassembler\n-mcpu=arg use `arg' as the cpu for disassembly\n-j print opcode bytes\n-P print the info plist section as strings\n-C print linker optimization hints\n--version print the version of /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/otool")])],1)],1)],1)])}),[],!1,null,null,null);t.default=i.exports}}]);